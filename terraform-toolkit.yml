---
variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: "/certs"

.job_template: &job_template
  before_script:
    - terraform --version
  tags:
    - docker
    - miquido
  cache:
    paths:
      - "**/.terraform"

.get-latest-terraform:
  stage: .pre
  tags:
    - docker
    - miquido
  before_script:
    - apk add jq
    - apk add curl
  script:
    - |
      if [ -z ${GITHUB_TOKEN+x} ];
        then
          echo "GITHUB_TOKEN is unset";
          echo "TF_VERSION=1.0.0" >> build.env
        else
          TF_VERSION=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/hashicorp/terraform/releases/latest \
                  | jq --raw-output '.tag_name' | cut -c 2-)
        echo "Latest terraform version = $TF_VERSION"
        echo "TF_VERSION=$TF_VERSION" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env

.check-formatting:
  <<: *job_template
  image:
    name: hashicorp/terraform:$TF_VERSION
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  variables:
    TF_VERSION: 1.0.0
  script:
    - terraform fmt -check -recursive

#### Deprecated
.validate:
  <<: *job_template
  variables:
    ENVIRONMENTS: prod
    TF_VERSION: 1.0.0
  image:
    name: miquidocompany/terraform:$TF_VERSION
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo "WARNING! .validate is deprecated and will be removed. Use .validate-terraform instead"
    # yamllint disable rule:line-length
    - |
      IFS=' ' #setting space as delimiter
      read -ra ENVIRONMENTS <<<"$ENVIRONMENTS"
      for ENVIRONMENT in "${ENVIRONMENTS[@]}"
      do
        cd "$ENVIRONMENT"
        git config --global \url."https://${GITLAB_TERRAFORM_DEPLOY_TOKEN_USERNAME}:${GITLAB_TERRAFORM_DEPLOY_TOKEN_SECRET}@gitlab.com/miquido/terraform".insteadOf "ssh://git@gitlab.com/miquido/terraform"
        git config --global url."https://github.com".insteadOf "ssh://git@github.com"
        terraform init -backend=false
        terraform validate
        cd -
      done
    # yamllint enable rule:line-length

.validate-terraform:
  variables:
    ENVIRONMENTS: prod
    TF_VERSION: 1.0.0
  image:
    name: hashicorp/terraform:$TF_VERSION
    entrypoint:
      - ""
  script:
    - git config --global \url."https://${GITLAB_TERRAFORM_DEPLOY_TOKEN_USERNAME}:${GITLAB_TERRAFORM_DEPLOY_TOKEN_SECRET}@gitlab.com/miquido/terraform".insteadOf "ssh://git@gitlab.com/miquido/terraform"  # yamllint disable-line rule:line-length
    - git config --global url."https://github.com".insteadOf "ssh://git@github.com"
    - apk add python3
    - apk add --update py-pip
    - pip install miquido_terraform_environments_check
    - python3 -m miquido_terraform_environments_check
  tags:
    - miquido
    - docker

.generate_readme:
  image: frolvlad/alpine-bash
  tags:
    - miquido
    - docker
  before_script:
    - apk add make
    - apk add curl
    - apk add git
  artifacts:
    paths:
      - README.md
  script:
    # yamllint disable rule:line-length
    - |
      set -euf -o pipefail

      if [ ! -f .editorconfig ]; then
      cat > .editorconfig << 'EOF'
      root = true

      [*]
      indent_style = space
      indent_size = 2
      charset = utf-8
      trim_trailing_whitespace = true
      insert_final_newline = true
      end_of_line = lf

      [Makefile]
      indent_style = tab
      indent_size = 4

      EOF
      echo ".editorconfig created!";
      fi

      if [ ! -f .gitignore ]; then
      cat > .gitignore << 'EOF'
      build-harness
      .build-harness
      .terraform
      *.tfstate
      *.tfstate.backup

      EOF
      echo ".gitignore created!";
      fi

      if [ ! -f Makefile ]; then
      cat > Makefile << 'EOF'
      SHELL := /bin/bash

      export TERRAFORM = /usr/local/bin/terraform

      # List of targets the `readme` target should call before generating the readme
      export README_DEPS ?= docs/targets.md docs/terraform.md

      -include $(shell curl -sSL -o .build-harness "https://git.io/build-harness"; echo .build-harness)

      ## Lint Terraform code
      lint:
          @cd examples/complete && terraform init && terraform validate && terraform fmt
          @terraform fmt
      EOF
      echo "Makefile created!";
      fi

      if [ ! -f examples/complete/main.tf ]; then
      mkdir -p examples/complete
      cat > examples/complete/main.tf << 'EOF'
      provider "aws" {
        region = "us-east-1"
      }

      module "test" {
        source = "../../"
      }
      EOF
      echo "examples/complete/main.tf created!";
      fi

      if [ ! -f README.yaml ]; then
      cat > README.yaml << 'EOF'
      name: miquido-terraform-
      repos:
        gitlab: miquido/terraform-
      badges: []
      related: []
      # description: ""
      # usage: |-
      #   ```hcl
      #   module {
      #     source = "git::ssh://git@gitlab.com/miquido/terraform/terraform-.git?ref=master"
      #     ...
      #   }
      #   ```
      include:
        - "docs/terraform.md"
        - "docs/targets.md"
      contributors:
        # Please fill in real contributors (this is an example)
        - name: "Konrad Obal"
          github: "k911"
      EOF
      echo "README.yaml created!";
      fi

      cat > README_TMPL.md << 'EOF'
      <!-- This file was automatically generated by the `build-harness`. Make all changes to `README.yaml` and run `make readme` to rebuild this file. -->
      {{- defineDatasource "config" .Env.README_YAML | regexp.Replace ".*" "" -}}
      {{- defineDatasource "includes" .Env.README_INCLUDES | regexp.Replace ".*" "" }}
      [![Miquido][logo]](https://www.miquido.com/)

      # {{(ds "config").name}}{{ if gt (len (ds "config").name) 34 }}{{ print "\n\n" }}{{ end }}{{ if has (ds "config") "badges" }}{{- range $badge := (ds "config").badges -}}{{ printf " [![%s](%s)](%s)" $badge.name $badge.image $badge.url }}{{ end }}{{ end }}

      {{- if has (ds "config") "logo" }}
      ![{{(ds "config").name}}]({{ (ds "config").logo }})

      {{- end }}
      {{- if has (ds "config") "description" }}
      {{(ds "config").description }}

      {{- end }}
      ---

      {{- if (file.Exists "main.tf") }}
      **Terraform Module**

      {{- if has (ds "config") "repos" }}
      {{ printf "\n" }}

      {{- if has (ds "config").repos "gitlab" }}
      {{ printf "GitLab Repository: https://gitlab.com/%s\n" (ds "config").repos.gitlab }}
      {{- end }}

      {{- if has (ds "config").repos "bitbucket" }}
      {{ printf "BitBucket Repository: https://bitbucket.org/%s\n" (ds "config").repos.bitbucket }}
      {{- end }}

      {{- if has (ds "config").repos "github" }}
      {{ printf "GitHub Repository: https://github.com/%s\n" (ds "config").repos.github }}
      {{- end }}
      {{- end }}
      {{- end }}

      {{- if has (ds "config") "screenshots" }}
      ## Screenshots

      {{ range $screenshot := (ds "config").screenshots }}
      {{ printf "![%s](%s)\n*%s*" $screenshot.name $screenshot.url $screenshot.description }}{{ end }}

      {{- end }}
      {{- if has (ds "config") "introduction" }}
      ## Introduction

      {{ (ds "config").introduction -}}

      {{- end }}
      {{- if has (ds "config") "usage" }}
      ## Usage

      {{ (ds "config").usage -}}

      {{- else }}
      {{- if has (ds "config") "repos" }}
      {{- if has (ds "config").repos "gitlab" }}
      ## Usage

      ```hcl
      module "main" {
        {{ printf "source = \"git::ssh://git@gitlab.com/%s.git?ref=master\"" (ds "config").repos.gitlab }}
        ...
      }
      ```
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if has (ds "config") "quickstart" -}}
      ## Quick Start

      {{ (ds "config").quickstart -}}

      {{- end }}
      {{- if has (ds "config") "examples" }}
      ## Examples

      {{(ds "config").examples }}

      {{- end }}
      {{- if has (ds "config") "include" }}
      {{ range $file := (datasource "config").include -}}
      {{ (include "includes" $file) }}
      {{- end }}
      {{- end }}

      ## Developing

      1. Make changes in terraform files

      2. Regenerate documentation

          ```bash
          bash <(git archive --remote=git@gitlab.com:miquido/terraform/terraform-readme-update.git master update.sh | tar -xO)
          ```

      3. Run lint

          ```
          make lint
          ```

      ## Copyright

      Copyright Â© 2017-{{ time.Now.Year }} [Miquido](https://miquido.com)


      {{ if has (datasource "config") "contributors" }}
      ### Contributors

      | {{ range $contributor := (ds "config").contributors }}{{ printf " [![%s][%s_avatar]][%s_homepage]<br/>[%s][%s_homepage] |" $contributor.name $contributor.github $contributor.github $contributor.name $contributor.github}}{{ end }}
      |{{- range $contributor := (ds "config").contributors -}}---|{{ end }}

      {{ range $contributor := (ds "config").contributors -}}
      {{- if has $contributor "homepage" }}
      {{ printf "  [%s_homepage]: %s" $contributor.github $contributor.homepage }}
      {{ else -}}
      {{ printf "  [%s_homepage]: https://github.com/%s" $contributor.github $contributor.github }}
      {{ end -}}
      {{ if has $contributor "avatar" }}{{ printf "  [%s_avatar]: %s" $contributor.github $contributor.avatar }}
      {{ else -}}
      {{ printf "  [%s_avatar]: https://github.com/%s.png?size=150" $contributor.github $contributor.github }}
      {{- end }}
      {{ end }}
      {{ end }}

        [logo]: https://www.miquido.com/img/logos/logo__miquido.svg
        [website]: https://www.miquido.com/
        [gitlab]: https://gitlab.com/miquido
        [github]: https://github.com/miquido
        [bitbucket]: https://bitbucket.org/miquido

      EOF

      export README_TEMPLATE_FILE="README_TMPL.md"
      make init
      make readme/deps
      make readme
      rm -rf "README_TMPL.md"
