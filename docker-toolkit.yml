---
variables:
  DOCKER_DRIVER: "overlay2"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKERFILE: "Dockerfile"

.get-latest-trivy:
  stage: .pre
  tags:
    - docker
    - miquido
  before_script:
    - apk add jq
    - apk add curl
  script:
    - |
      if [ -z ${GITHUB_TOKEN+x} ];
        then
          echo "GITHUB_TOKEN is unset";
          echo "TRIVY_VERSION=0.19.2" >> build.env
        else
          TRIVY_VERSION=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/aquasecurity/trivy/releases/latest \
                  | jq --raw-output '.tag_name' | cut -c 2-)
        echo "Latest trivy version = $TRIVY_VERSION"
        echo "TRIVY_VERSION=$TRIVY_VERSION" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env

.get-latest-hadolint:
  stage: .pre
  tags:
    - docker
    - miquido
  before_script:
    - apk add jq
    - apk add curl
  script:
    - |
      if [ -z ${GITHUB_TOKEN+x} ];
        then
          echo "GITHUB_TOKEN is unset";
          echo "HADOLINT_VERSION=2.6.0" >> build.env
        else
          HADOLINT_VERSION=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/hadolint/hadolint/releases/latest \
                  | jq --raw-output '.tag_name' | cut -c 2-)
        echo "Latest hadolint version = $HADOLINT_VERSION"
        echo "HADOLINT_VERSION=$HADOLINT_VERSION" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env

.docker_compose: &docker_compose
  image: docker/compose:alpine-1.28.5
  before_script:
    - docker version
    - docker-compose version
    - docker-compose down --volumes --remove-orphans
  after_script:
    - docker-compose down --volumes --remove-orphans
  tags:
    - docker
    - miquido

.validate-docker-compose:
  <<: *docker_compose
  stage: .pre
  script:
    - docker-compose config

.docker-lint:
  variables:
    # ignore rules from: https://github.com/hadolint/hadolint#rules (ignore exact version pinning for apt/apk)
    DEFAULT_IGNORES: DL3018 DL3008
    DOCKERFILE: "Dockerfile"
    HADOLINT_VERSION: "2.6.0"

  tags:
    - docker
    - miquido
  image: hadolint/hadolint:v$HADOLINT_VERSION-debian
  script:
    - |
      IFS=' ' #setting space as delimiter
      read -ra DEFAULT_IGNORES <<<"$DEFAULT_IGNORES"
      read -ra EXTRA_IGNORES <<<"$EXTRA_IGNORES"
      IGNORES=()

      for value in "${DEFAULT_IGNORES[@]}"
      do
        IGNORES+=("--ignore")
        IGNORES+=("$value")
      done
      for value in "${EXTRA_IGNORES[@]}"
      do
        IGNORES+=("--ignore")
        IGNORES+=("$value")
      done

    - hadolint "${IGNORES[@]}" $DOCKERFILE

.container-scanning:
  <<: *docker_compose
  variables:
    TRIVY_VERSION: "0.19.2"
  tags:
    - docker
    - miquido
  stage: test
  before_script:
    - \[ ! -n "$DOCKER_BUILD_IMAGE" \] && echo "Missing $DOCKER_BUILD_IMAGE variable. Exiting"
  cache:
    paths:
      - .trivycache/
  script:
    # Download trivy
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf - # yamllint disable-line rule:line-length
    - docker pull $DOCKER_BUILD_IMAGE
    # Build report
    - |
      ./trivy --exit-code 0 --cache-dir .trivycache/ --vuln-type os --ignore-unfixed \
      --no-progress --format template --template "@contrib/gitlab.tpl" \
      -o gl-container-scanning-report.json ${DOCKER_BUILD_IMAGE}
    - |
      ./trivy --exit-code 0 --cache-dir .trivycache/ --vuln-type os --ignore-unfixed \
      --no-progress --format template --template "@contrib/html.tpl" \
      -o container-scanning-report.html ${DOCKER_BUILD_IMAGE}
    - |
      ./trivy --exit-code 0 --cache-dir .trivycache/ --vuln-type os --ignore-unfixed \
      --no-progress --format json -o container-scanning-report.json ${DOCKER_BUILD_IMAGE}
    # Print report
    - |
      ./trivy --exit-code 0 --cache-dir .trivycache/ --vuln-type os --ignore-unfixed \
      --no-progress --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL ${DOCKER_BUILD_IMAGE}
    # Fail on severe vulnerabilities
    - |
      ./trivy --exit-code 1 --cache-dir .trivycache/ --vuln-type os --ignore-unfixed \
      --no-progress --ignore-unfixed --severity HIGH,CRITICAL ${DOCKER_BUILD_IMAGE}
  artifacts:
    paths:
      - gl-container-scanning-report.json
      - container-scanning-report.html
      - container-scanning-report.json
    reports:
      container_scanning: gl-container-scanning-report.json

.push:
  tags:
    - docker
    - miquido

  image: miquidocompany/docker-compose-aws-cli:docker-compose-1.28.5-aws-cli-1.19.25
  stage: push
  script:
    - docker pull $DOCKER_BUILD_IMAGE
    - docker tag $DOCKER_BUILD_IMAGE $ECR_REPOSITORY:$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA
    - aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_ID
    - docker push $ECR_REPOSITORY:$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

.deploy:
  tags:
    - docker
    - miquido
  image:
    name: docker.io/fabfuel/ecs-deploy:1.11.3
  stage: deploy
  resource_group: deploy
  script:
    - |
      ecs deploy $ECS_CLUSTER_NAME $ECS_SERVICE_NAME \
      --image $CONTAINER_NAME $ECR_REPOSITORY:$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA --timeout=1200 --rollback
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.push-miquido-hub:
  image: docker:20.10.6
  variables:
    BASE_DOCKER_IMAGE: "<ENTER_VAR>"
    DOCKERHUB_IMAGE: "<ENTER_VAR>"
    DOCKER_KEY: "<ENTER_VAR>"
    DOCKER_USER: "<ENTER_VAR>"
  stage: .post
  tags:
    - docker
    - miquido
  before_script:
    - docker version
  script:
    - TXT_RED="\e[31m"
    - |
      if [ "$BASE_DOCKER_IMAGE" = "<ENTER_VAR>" ] && [ -z "$DOCKER_IMAGE_VERSION" ]; then
        echo -e "${TXT_RED}Please provide BASE_DOCKER_IMAGE or DOCKER_IMAGE_VERSION variable"
        exit 1
      fi;
    - |
      if [ "$DOCKERHUB_IMAGE" = "<ENTER_VAR>" ]; then
        echo -e "${TXT_RED}Please provide DOCKERHUB_IMAGE variable"
        exit 1
      fi;
    - |
      if [ "$DOCKER_KEY" = "<ENTER_VAR>" ]; then
        echo -e "${TXT_RED}Please provide DOCKER_KEY variable"
        exit 1
      fi;
    - |
      if [ "$DOCKER_USER" = "<ENTER_VAR>" ]; then
        echo -e "${TXT_RED}Please provide DOCKER_USER variable"
        exit 1
      fi;
    - |
      if [ -z "$DOCKER_IMAGE_VERSION" ]; then
        FROM_DOCKER=$(cat Dockerfile | grep $BASE_DOCKER_IMAGE)
        DOCKER_IMAGE_VERSION=${FROM_DOCKER##*:}
      fi;
    - docker build -t $DOCKERHUB_IMAGE:$DOCKER_IMAGE_VERSION .
    - echo $DOCKER_KEY | docker login --username $DOCKER_USER --password-stdin
    - docker push $DOCKERHUB_IMAGE:$DOCKER_IMAGE_VERSION
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
